#include <FEHLCD.h>
#include <FEHIO.h>
#include <FEHUtility.h>
#include <FEHMotor.h>
#include <math.h>
#include <FEHRCS.h>

//Declarations for encoders & motors
DigitalEncoder left_encoder(FEHIO::P2_0);
DigitalEncoder right_encoder(FEHIO::P2_2);
FEHMotor left_motor(FEHMotor::Motor0,9.0);
FEHMotor right_motor(FEHMotor::Motor1,9.0); // RIGHT MOTOR IS BACKWARDS
AnalogInputPin left_opto(FEHIO::P1_0);
AnalogInputPin middle_opto(FEHIO::P1_2);
AnalogInputPin right_opto(FEHIO::P1_4);

//Constants
#define PI 3.14159265359
#define VEX_COUNTS 180
#define RADIUS 4.5

enum LineStates
{
    LEFT,
    MIDDLE,
    RIGHT
};


void turn_right(int percent, int degrees) //using encoders
{
    double distance, radius=1.5;
    int counts;

    //Calculate arc distance
    distance = (RADIUS*PI*degrees)/180;
    // Calculate counts
    counts = distance*VEX_COUNTS/2/PI/radius;

    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();
    //Set both motors to desired percent
    right_motor.SetPercent(percent);
    left_motor.SetPercent(percent);

    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2 < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}
void turn_left(int percent, int degrees) //using encoders
{
    double distance, radius=1.5;
    int counts;

    //Calculate arc distance
    distance = (RADIUS*PI*degrees)/180;
    // Calculate counts
    counts = distance*VEX_COUNTS/2/PI/radius;
    
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();
    //Set both motors to desired percent
    //hint: set right motor backwards, left motor forwards
    right_motor.SetPercent(-percent);
    left_motor.SetPercent(-percent);

    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2 < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}
void move_forward(int percent, double distance) //using encoders
{
    float radius=1.5;
    int counts;

    //Determine counts from distance
    counts = distance*VEX_COUNTS/2/PI/radius;
    
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(-percent);
    left_motor.SetPercent(percent);
    
    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2 < counts);
    LCD.Write("it should be stoping now\n");

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}
void move_backward(int percent, double distance) //using encoders
{
    float radius=1.5;
    int counts;

    //Determine counts from distance
    counts = distance*VEX_COUNTS/2/PI/radius;

    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(percent);
    left_motor.SetPercent(-percent);
    
    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2 < counts);
    LCD.Write("it should be stoping now\n");

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
    
}

int main(void)
{
    int a, motor_percent=25, state;

    // RCS.InitializeTouchMenu("0910B2EGL");
    // Wait for light to start
    while(middle_opto.Value() > 2.8); // REVISE WITH VALUES
    LCD.WriteLine("Starting now");
    Sleep(500);

    // while(!LCD.Touch(&a,&a));
    // while(LCD.Touch(&a,&a));
    // LCD.Clear();

    // TEST CODE
    // move_forward(motor_percent,12);
    // LCD.WriteLine(left_encoder.Counts());
    // LCD.WriteLine(right_encoder.Counts());
    // Sleep(500);

    // turn_left(motor_percent,90);
    // LCD.WriteLine(left_encoder.Counts());
    // LCD.WriteLine(right_encoder.Counts());
    // Sleep(500);

    // turn_right(motor_percent,90);
    // LCD.WriteLine(left_encoder.Counts());
    // LCD.WriteLine(right_encoder.Counts());
    // Sleep(5000);

    // Turn toward ramp
    turn_left(motor_percent, 100);
    Sleep(500);

    LCD.WriteLine(left_encoder.Counts());
    LCD.WriteLine(right_encoder.Counts());

    // Drive forward a little
    move_forward(motor_percent, 8);
    Sleep(500);

    // Turn more
    turn_left(motor_percent, 37);
    Sleep(500);

    // Drive up ramp
    move_forward(30, 30);
    Sleep(500);

    LCD.WriteLine(left_encoder.Counts());
    LCD.WriteLine(right_encoder.Counts());

    // Turn towards light
    turn_left(motor_percent-10,95);
    Sleep(500);

    // Drive forward until over top of light hole
    while(middle_opto.Value() >2.8) // REVISE WITH VALUES (sensor not on line or light hole)
    {
        left_motor.SetPercent(15);
        right_motor.SetPercent(-17);
    }
    left_motor.Stop();
    right_motor.Stop();
    Sleep(500);
    // Wait for light color
    if(middle_opto.Value()<2.35) // REVISE WITH VALUES (blue light)
    {
        LCD.WriteLine("light color: blue");
        move_forward(motor_percent,7);
        turn_right(10,15);
        move_forward(10,1);
        Sleep(500);
        turn_left(10,15);
    }
    else if(middle_opto.Value()>2.35) // REVISE WITH VALUES (red light)
    {
        LCD.WriteLine("light color: red");
        move_forward(motor_percent,7);
        turn_left(10,15);
        move_forward(10,1);
        Sleep(500);
        turn_right(10,15);
    }

    // Drive back
    move_backward(motor_percent, 8);
    Sleep(500);
    turn_right(motor_percent, 185);
    Sleep(500);
    move_forward(motor_percent, 8);
    Sleep(500);
    turn_right(motor_percent, 90);
    Sleep(500);
    move_forward(motor_percent, 42);

    Sleep(2000); //Wait for counts to stabilize
    //Print out data
    LCD.Write("Actual LE Counts: ");
    LCD.WriteLine(left_encoder.Counts());
    LCD.Write("Actual RE Counts: ");
    LCD.WriteLine(right_encoder.Counts());

    return 0;
}
