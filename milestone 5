#include <FEHLCD.h>
#include <FEHIO.h>
#include <FEHUtility.h>
#include <FEHMotor.h>
#include <math.h>
#include <FEHRCS.h>

//Declarations for encoders & motors
DigitalEncoder left_encoder(FEHIO::P2_0);
DigitalEncoder right_encoder(FEHIO::P2_3);
DigitalEncoder arm_encoder(FEHIO::P2_4);
FEHMotor left_motor(FEHMotor::Motor0,9.0);
FEHMotor right_motor(FEHMotor::Motor1,9.0); // RIGHT MOTOR IS BACKWARDS
FEHMotor arm_motor(FEHMotor::Motor2,9.0);
AnalogInputPin left_opto(FEHIO::P1_0);
AnalogInputPin middle_opto(FEHIO::P1_2);
AnalogInputPin right_opto(FEHIO::P1_4);
AnalogInputPin cds(FEHIO::P0_1);

//Constants
#define PI 3.14159265359
#define VEX_COUNTS 180
#define RADIUS 4

enum LineStates
{
    LEFT,
    MIDDLE,
    RIGHT
};

//prototypes
float findError(int counts, int currentCounts, int percent, float error, float integral, float derivative);
void turn_right(int percent, int degrees);
void turn_left(int percent, int degrees);
void move_forward(int percent, double distance);
void move_backward(int percent, double distance);
void move_backward_ramp(int percent, double distance);
void move_backward_window(int percent, double distance);
void move_arm_up(int percent, int time);
void move_arm_down(int percent, int time);
void move_forward_new(int percent, double distance);
void follow_line();


int main(void)
{
    int a, state, lever, arm_percent = 25;
    float motor_percent=30;

   
    RCS.InitializeTouchMenu("0910B2EGL");
    lever = RCS.GetLever();
    LCD.WriteLine(cds.Value());
    LCD.WriteLine(cds.Value());
    // Wait for light to start
    LCD.WriteLine(cds.Value());
    while(cds.Value() > 2.8); // REVISE WITH VALUES
    LCD.WriteLine(cds.Value());
    LCD.WriteLine("fick off");
    LCD.WriteLine("Starting now");
    Sleep(500);

    // while(!LCD.Touch(&a,&a));
    // while(LCD.Touch(&a,&a));
    /// LCD.Clear();
  
    //drive to start
    move_forward(motor_percent, 7);
    turn_left(motor_percent, 50);
    move_forward(motor_percent, 15);
    turn_left(motor_percent,97);
    move_forward(motor_percent,6);


    //turn arm to spin the thing
    move_arm_down(arm_percent, 3500);
    Sleep(500);
    move_backward(motor_percent, 1);
    move_arm_up(arm_percent, 3500);
    move_forward(motor_percent, 1);
    move_arm_down(arm_percent, 1500);

    //turn arm to spin the thing
    move_arm_up(arm_percent, 3500);
    Sleep(500);
    move_backward(motor_percent, 1);
    move_arm_down(arm_percent, 3500);
    move_forward(motor_percent, 1);
    move_arm_up(arm_percent, 2500);



    //drive backwards
    move_backward(motor_percent, 3);
    turn_left(motor_percent, 90);
    move_forward(motor_percent, 10);
    turn_right(motor_percent,45);
    move_forward(motor_percent, 10);


    Sleep(2000); //Wait for counts to stabilize
    //Print out data
    LCD.Write("Actual LE Counts: ");
    LCD.WriteLine(left_encoder.Counts());
    LCD.Write("Actual RE Counts: ");
    LCD.WriteLine(right_encoder.Counts());

    return 0;
}


void turn_right(int percent, int degrees) //using encoders
{
    double distance, radius=1.5;
    int counts;

    //Calculate arc distance
    distance = (RADIUS*PI*degrees)/180;
    // Calculate counts
    counts = distance*VEX_COUNTS/2/PI/radius;

    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();
    //Set both motors to desired percent
    right_motor.SetPercent(percent);
    left_motor.SetPercent(percent);

    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2 < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}
void turn_left(int percent, int degrees) //using encoders
{
    double distance, radius=1.5;
    int counts;

    //Calculate arc distance
    distance = (RADIUS*PI*degrees)/180;
    // Calculate counts
    counts = distance*VEX_COUNTS/2/PI/radius;
    
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();
    //Set both motors to desired percent
    //hint: set right motor backwards, left motor forwards
    right_motor.SetPercent(-percent);
    left_motor.SetPercent(-percent);

    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2 < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}
void move_forward(int percent, double distance) //using encoders
{
    float radius=1.5;
    int counts;

    //Determine counts from distance
    counts = distance*VEX_COUNTS/2/PI/radius;
    
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(-percent);
    left_motor.SetPercent(percent);
    
    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2 < counts);
    LCD.Write("it should be stoping now\n");

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}
void move_backward(int percent, double distance) //using encoders
{
    float radius=1.5;
    int counts;

    //Determine counts from distance
    counts = distance*VEX_COUNTS/2/PI/radius;

    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(percent);
    left_motor.SetPercent(-percent);
    
    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2 < counts);
    LCD.Write("it should be stoping now\n");

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
    
}
void move_backward_ramp(int percent, double distance) //using encoders
{
    float radius=1.5;
    int counts;

    //Determine counts from distance
    counts = distance*VEX_COUNTS/2/PI/radius;

    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(percent+1);
    left_motor.SetPercent(-percent);
    
    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2 < counts);
    LCD.Write("it should be stoping now\n");

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
    
}
void move_backward_window(int percent, double distance) //using encoders
{
    float radius=1.5;
    int counts;

    //Determine counts from distance
    counts = distance*VEX_COUNTS/2/PI/radius;

    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(percent+15);
    left_motor.SetPercent(-percent);
    
    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2 < counts);
    LCD.Write("it should be stoping now\n");

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
    
}
void move_arm_up(int percent, int time)
{
    // Move arm
    arm_motor.SetPercent(percent);
    Sleep(time);
    LCD.WriteLine("Should be stooping now");
    arm_motor.Stop();
}
void move_arm_down(int percent, int time)
{
    // Move arm
    arm_motor.SetPercent(-percent);
    Sleep(time);
    LCD.WriteLine("Should be stooping now");
    arm_motor.Stop();
}
